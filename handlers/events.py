import logging
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from states import EventStates

logger = logging.getLogger(__name__)

async def start_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data.clear()
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π! üéâ\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel\n\n"
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        )
        return EventStates.NAME
    except Exception as e:
        logger.error(f"Error in start_event: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        name = update.message.text.strip()
        if not name or len(name) < 2:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)."
            )
            return EventStates.NAME
        context.user_data["name"] = name
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
        )
        return EventStates.PHONE
    except Exception as e:
        logger.error(f"Error in get_name: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return EventStates.NAME

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        phone = update.message.text.strip()
        phone_pattern = re.compile(r'^\+?[78][\-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$')
        if not phone_pattern.match(phone):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
            )
            return EventStates.PHONE
        context.user_data["phone"] = phone
        await update.message.reply_text(
            "–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å:\n"
            "- –¢–∏–ø —Å–æ–±—ã—Ç–∏—è\n"
            "- –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π\n"
            "- –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞\n"
            "- –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
        )
        return EventStates.COMMENT
    except Exception as e:
        logger.error(f"Error in get_phone: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return EventStates.PHONE

async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        comment = update.message.text.strip()
        if not comment or len(comment) < 10:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è "
                "(–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return EventStates.COMMENT
        context.user_data["comment"] = comment
        name = context.user_data["name"]
        phone = context.user_data["phone"]
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{comment}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏! üéØ"
        )
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in get_comment: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return EventStates.COMMENT

async def cancel_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data.clear()
        await update.message.reply_text(
            "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel_event: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END