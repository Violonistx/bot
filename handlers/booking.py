import logging
import re
import json
from datetime import datetime
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from states import BookingStates
from utils import MASTER_CLASSES, format_datetime

logger = logging.getLogger(__name__)

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data.clear()
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            event_id = int(query.data.split('_')[-1])
            selected_event = next((event for event in MASTER_CLASSES if event['id'] == event_id), None)
            if not selected_event:
                await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
                return ConversationHandler.END
            context.user_data["selected_event"] = selected_event
            event_time = format_datetime(selected_event['events'][0]['start_datetime'])
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: *{selected_event['name']}*\n"
                    f"üí∞ –¶–µ–Ω–∞: {selected_event['price']['final_price']}‚ÇΩ\n"
                    f"üìç –ú–µ—Å—Ç–æ: {selected_event['location']}\n"
                    f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_time}\n\n"
                    "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
                ),
                parse_mode="Markdown"
            )
            return BookingStates.NAME
        keyboard = []
        for i, event in enumerate(MASTER_CLASSES):
            keyboard.append([
                InlineKeyboardButton(
                    f"{event['name']} ‚Äî {event['price']['final_price']}‚ÇΩ",
                    callback_data=f"select_event_{i}"
                )
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! üéØ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=reply_markup
        )
        return BookingStates.SELECT_EVENT
    except Exception as e:
        logger.error(f"Error in start_booking: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def select_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()
        event_index = int(query.data.split('_')[-1])
        selected_event = MASTER_CLASSES[event_index]
        context.user_data["selected_event"] = selected_event
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{selected_event['name']}*\n"
            f"–¶–µ–Ω–∞: {selected_event['price']['final_price']}‚ÇΩ\n"
            f"–ú–µ—Å—Ç–æ: {selected_event['location']}\n\n"
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
            parse_mode="Markdown"
        )
        return BookingStates.NAME
    except Exception as e:
        logger.error(f"Error in select_event: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"get_name called. update.message: {update.message}")
    try:
        name = update.message.text.strip()
        if not name or len(name) < 2:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
            return BookingStates.NAME
        context.user_data["name"] = name
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        return BookingStates.PHONE
    except Exception as e:
        logger.error(f"Error in get_name: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return BookingStates.NAME

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        phone = update.message.text.strip()
        phone_pattern = re.compile(r'^\+?[78][\-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$')
        if not phone_pattern.match(phone):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
            return BookingStates.PHONE
        context.user_data["phone"] = phone
        selected_event = context.user_data["selected_event"]
        event_time = format_datetime(selected_event['events'][0]['start_datetime'])
        context.user_data["time"] = event_time
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {selected_event['name']}\n"
            f"–ò–º—è: {context.user_data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–í—Ä–µ–º—è: {event_time}\n\n"
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        booking_data = {
            "event": selected_event,
            "name": context.user_data["name"],
            "phone": phone,
            "time": event_time,
            "booking_time": datetime.now().isoformat()
        }
        try:
            with open("bookings.json", "r", encoding="utf-8") as file:
                bookings = json.load(file)
            bookings["bookings"].append(booking_data)
            with open("bookings.json", "w", encoding="utf-8") as file:
                json.dump(bookings, file, ensure_ascii=False, indent=4)
        except Exception as e:
            logger.error(f"Error saving booking: {e}")
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in get_phone: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return BookingStates.PHONE

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        time_str = update.message.text.strip()
        try:
            booking_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
            if booking_time < datetime.now():
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
                return BookingStates.TIME
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            return BookingStates.TIME
        booking_data = {
            "event": context.user_data["selected_event"],
            "name": context.user_data["name"],
            "phone": context.user_data["phone"],
            "time": time_str,
            "booking_time": datetime.now().isoformat()
        }
        try:
            with open("bookings.json", "r", encoding="utf-8") as file:
                bookings = json.load(file)
            bookings["bookings"].append(booking_data)
            with open("bookings.json", "w", encoding="utf-8") as file:
                json.dump(bookings, file, ensure_ascii=False, indent=4)
        except Exception as e:
            logger.error(f"Error saving booking: {e}")
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {context.user_data['selected_event']['name']}\n"
            f"–ò–º—è: {context.user_data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
            f"–í—Ä–µ–º—è: {time_str}\n\n"
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in get_time: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return BookingStates.TIME

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data.clear()
        await update.message.reply_text(
            "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel_booking: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END