from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import sys
import os
import logging

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils import MASTER_CLASSES, format_datetime

logger = logging.getLogger(__name__)

async def show_afisha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not MASTER_CLASSES:
            await update.message.reply_text("–ê—Ñ–∏—à–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return

        await update.message.reply_text(
            "üé® *–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
            parse_mode="Markdown"
        )

        for event in MASTER_CLASSES:
            try:
                keyboard = [[
                    InlineKeyboardButton(
                        "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                        callback_data=f"book_event_{event['id']}"
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                event_time = format_datetime(event['events'][0]['start_datetime'])
                description = (
                    f"*{event['name']}*\n"
                    f"üí∞ –¶–µ–Ω–∞: {event['price']['final_price']}‚ÇΩ\n"
                    f"üìç –ú–µ—Å—Ç–æ: {event['location']}\n"
                    f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_time}\n\n"
                )

                if 'parameters' in event and 'parameters' in event['parameters']:
                    params = event['parameters']['parameters']
                    if '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' in params:
                        description += f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {params['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'][0]}\n"
                    if '–í–æ–∑—Ä–∞—Å—Ç' in params:
                        description += f"üë• –í–æ–∑—Ä–∞—Å—Ç: {params['–í–æ–∑—Ä–∞—Å—Ç'][0]}\n"
                    if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' in params:
                        description += f"üë• –ú–µ—Å—Ç: {params['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'][0]}\n"


                if event['details']:
                    description += "\n" + "\n".join(event['details'])


                await update.message.reply_text(
                    description,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )

            except Exception as e:
                logger.error(f"Error processing event {event.get('id', 'unknown')}: {e}")
                continue

    except Exception as e:
        logger.error(f"Error in show_afisha: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ñ–∏—à–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )